# -*- coding: utf-8 -*-
"""Standardising.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gAbJ2fLLx1z1Nu5TazVCG31bcnTs1Bq4

### import libraries and file
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from ast import literal_eval
import numpy as np

sub = pd.read_csv("/content/drive/My Drive/IE APi/Data/Suburbs_of_mel.csv")
sports = pd.read_csv("/content/drive/My Drive/IE APi/Data/Output files/Sports.csv")
library = pd.read_csv("/content/drive/My Drive/IE APi/Data/Output files/Library.csv")
tourist = pd.read_csv("/content/drive/My Drive/IE APi/Data/Output files/Tourist.csv")
nature = pd.read_csv("/content/drive/My Drive/IE APi/Data/Output files/Nature.csv")
worship = pd.read_csv("/content/drive/My Drive/IE APi/Data/Output files/Worship.csv")
lga = pd.read_csv("/content/drive/My Drive/IE APi/Data/LGA1.csv")
sub_list = pd.read_csv("/content/drive/My Drive/IE APi/Data/new_Suburbs_final-2.csv")

nature["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in nature["Suburb"]]
sports["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in sports["Suburb"]]
library["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in library["Suburb"]]
worship["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in worship["Suburb"]]
tourist["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in tourist["Suburb"]]

sports

sub["Locality Name"] = sub['Locality Name'].str.strip()
sub["Municipality Name"] = sub['Municipality Name'].str.strip()
sub["Municipality"] = sub['Municipality'].str.strip()
sub

final_subs = sub_list["Suburb"].tolist()
final_subs

"""## Selected Suburbs"""

for i in range(len(sub)):
  if sub["Locality Name"][i].lower() not in final_subs:
    sub["Locality Name"][i] = np.nan

sub.dropna(subset=["Locality Name"], inplace = True)
sub.reset_index(drop = True, inplace = True)
sub

"""### Drop duplicate suburbs"""

sub.drop_duplicates(subset=["Locality Name"], inplace = True)

sub[sub["Locality Name"] == "Carlton North"]

sub1 = sub[["Municipality Name", "Municipality"]]
sub1.drop_duplicates(inplace = True)

sports["Municipality"] = sports['Municipality'].str.strip()
sports["Suburb"] = sports['Suburb'].str.strip()
sports[sports["Municipality"].isna()]

"""### Merge to standardize the municipality name"""

sports = pd.merge(sub1,sports, left_on = "Municipality", right_on = "Municipality")

sports

sports.columns

"""### Change the municipality and categories column to fit the standard"""

sports.drop(columns = ["Municipality"], inplace = True)
sports.rename(columns = {"Municipality Name":"Municipality"}, inplace = True)
sports.reset_index(inplace=True, drop = True)
for i in range(len(sports)):
      sports["Categories"][i] = literal_eval(sports["Categories"][i])
      sports.loc[i,"Categories"][0] = sports.loc[i,"Municipality"]

      if sports["Suburb"][i].lower() not in final_subs:
          sports["Suburb"][i] = np.nan

sports.dropna(subset=["Suburb"], inplace = True)
sports.reset_index(drop = True, inplace = True)

sports

sports.iloc[298]

"""### Fix the categories and municipality column for library"""

library

library.drop(columns = ["Suburb"], inplace = True)
library.rename(columns={"Municipality Name": "Municipality", "Locality Name":"Suburb"}, inplace=True)

library["Municipality"] = library['Municipality'].str.strip()
library["Suburb"] = library['Suburb'].str.strip()

for i in range(len(library)):
      library["Categories"][i] = literal_eval(library["Categories"][i])
      for j in range(len(library["Categories"][i])):
        library.loc[i,"Categories"][j] = library.loc[i,"Categories"][j].strip()
      if library["Suburb"][i].lower() not in final_subs:
          library["Suburb"][i] = np.nan

library.dropna(subset=["Suburb"], inplace = True)
library.reset_index(drop = True, inplace = True)

library

"""### Fix the categories and municipality column for nature"""

nature

nature["Municipality"] = nature['Municipality'].str.strip()
nature["Suburb"] = nature['Suburb'].str.strip()

for i in range(len(nature)):
    if "city of " in nature["Municipality"][i].lower():
        nature["Municipality"][i] = nature["Municipality"][i][7:] + " City"
    nature["Municipality"][i] = nature["Municipality"][i]+" Council"
    nature["Categories"][i] = literal_eval(nature["Categories"][i])
    nature.loc[i,"Categories"][0] = nature.loc[i,"Municipality"]

    for j in range(len(nature["Categories"][i])):
        nature.loc[i,"Categories"][j] = nature.loc[i,"Categories"][j].strip()
        if nature["Suburb"][i].lower() not in final_subs:
          nature["Suburb"][i] = np.nan

nature["Municipality"] = nature['Municipality'].str.strip()

nature.dropna(subset=["Suburb"], inplace = True)
nature.reset_index(drop = True, inplace = True)

nature

"""### Fix the categories and municipality column for tourist"""

tourist

tourist["Municipality"] = tourist['Municipality'].str.strip()
tourist["Suburb"] = tourist['Suburb'].str.strip()


for i in range(len(tourist)):
    if "city of " in tourist["Municipality"][i].lower():
        tourist["Municipality"][i] = tourist["Municipality"][i][7:] + " City"
    tourist["Municipality"][i] = tourist["Municipality"][i]+" Council"
    tourist["Categories"][i] = literal_eval(tourist["Categories"][i])
    tourist.loc[i,"Categories"][0] = tourist.loc[i,"Municipality"]

    for j in range(len(tourist["Categories"][i])):
        tourist.loc[i,"Categories"][j] = tourist.loc[i,"Categories"][j].strip()
        if tourist["Suburb"][i].lower() not in final_subs:
          tourist["Suburb"][i] = np.nan

tourist["Municipality"] = tourist['Municipality'].str.strip()

tourist.dropna(subset=["Suburb"], inplace = True)
tourist.reset_index(drop = True, inplace = True)

tourist

"""### Fix the categories and municipality column for worship"""

worship

worship["Municipality"] = worship['Municipality'].str.strip()
worship["Suburb"] = worship['Suburb'].str.strip()

for i in range(len(worship)):
    if "city of " in worship["Municipality"][i].lower():
        worship["Municipality"][i] = worship["Municipality"][i][7:] + " City"
    worship["Municipality"][i] = worship["Municipality"][i]+" Council"
    worship["Categories"][i] = literal_eval(worship["Categories"][i])
    worship.loc[i,"Categories"][0] = worship.loc[i,"Municipality"]

    for j in range(len(worship["Categories"][i])):
        worship.loc[i,"Categories"][j] = worship.loc[i,"Categories"][j].strip()
        if worship["Suburb"][i].lower() not in final_subs:
          worship["Suburb"][i] = np.nan

worship["Municipality"] = worship['Municipality'].str.strip()

worship.dropna(subset=["Suburb"], inplace = True)
worship.reset_index(drop = True, inplace = True)

worship

set(nature["Suburb"]).difference(set(sub["Locality Name"]))

sub_list[sub_list["Suburb"] == "heathcote"]

library[["Municipality","Suburb"]]

worship[["Municipality","Suburb"]]

nature["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in nature["Suburb"]]
sports["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in sports["Suburb"]]
library["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in library["Suburb"]]
worship["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in worship["Suburb"]]
tourist["Suburb"] = [i.replace("â\xa0Â\xa0","") for i in tourist["Suburb"]]

sub.rename(columns = {"Municipality":"LGA", "Municipality Name":"Municipality", "Locality Name": "Suburb"}, inplace = True)

sub[["Municipality","Suburb"]]

"""### Combine municipalities and suburbs"""

municipalitiesSubs = nature[["Municipality","Suburb"]]
municipalitiesSubs = municipalitiesSubs.append(sports[["Municipality","Suburb"]])
municipalitiesSubs = municipalitiesSubs.append(library[["Municipality","Suburb"]])
municipalitiesSubs = municipalitiesSubs.append(worship[["Municipality","Suburb"]])
municipalitiesSubs = municipalitiesSubs.append(tourist[["Municipality","Suburb"]])
municipalitiesSubs = municipalitiesSubs.append(sub[["Municipality","Suburb"]])
municipalitiesSubs.drop_duplicates(inplace = True)

municipalitiesSubs

set(municipalitiesSubs).difference(set(sub["Suburb"]))

set(sub["Suburb"]).difference(set(municipalitiesSubs))

tourist

"""### Write to csv"""

sports.drop_duplicates(subset = ["Latitude","Longitude", "Place Name"], inplace = True)
tourist.drop_duplicates(subset = ["Latitude","Longitude", "Place Name"], inplace = True)
nature.drop_duplicates(subset = ["Latitude","Longitude", "Place Name"], inplace = True)
library.drop_duplicates(subset = ["Latitude","Longitude"], inplace = True)
worship.drop_duplicates(subset = ["Latitude","Longitude", "Place Name"], inplace = True)

municipalitiesSubs.to_csv("/content/drive/My Drive/IE APi/Data/Suburbs_of_mel1.csv", index=False)
sports.to_csv("/content/drive/My Drive/IE APi/Data/Output files/Sports.csv", index=False)
tourist.to_csv("/content/drive/My Drive/IE APi/Data/Output files/Tourist.csv", index=False)
nature.to_csv("/content/drive/My Drive/IE APi/Data/Output files/Nature.csv", index=False)
library.to_csv("/content/drive/My Drive/IE APi/Data/Output files/Library.csv", index=False)
worship.to_csv("/content/drive/My Drive/IE APi/Data/Output files/Worship.csv", index=False)